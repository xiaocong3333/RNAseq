getwd()
#setwd("/Users/xiaocong/Materials/Practice/R/DEseq/")
#getwd()
list.files()
count_num <- read.table('Modified_Arc1RNAi_Control_BW.txt', sep = '\t', header = T, row.names = 1)
head(count_num)
#count_num<-count_num[, c(1, 3, 2,  4, 6, 5, 7, 9, 8)]
#head(count_num)
#write.table(count_num, file = "Modified_Arc1RNAi_Control_BW.txt", sep = '\t', quote = F)
sample_data <- read.csv("phenotype.txt", sep = '\t', header = T, row.names = 1)
sample_data
#sample_data<-sample_data[c(1,3,2,4,6,5,7,9,8),]
#sample_data
#write.table(sample_data, file = "two_phenotype_CopiafullRNAi_Control_BW.txt", sep = '\t', quote = F)
sample_data$condition = factor(sample_data$condition, c("Control", "Arc1RNAi"))
sample_data

##the log2 fold change and Wald test p value will be for the last variable(condition, not cell_type) 
##in the design formula, And if this is a factor, the comparison will be the last level of this 
##variable over the reference level!!!!!
library(DESeq2)
dds <- DESeqDataSetFromMatrix(countData=count_num, 
                              colData=sample_data, 
                              design=~condition)

#Filer the low reads
#dds <- dds[ rowSums(counts(dds)) > 1, ]

dds
dds <- DESeq(dds)
dds
resultsNames(dds) ##the intercept should be treated_vs_control, this very important!!!!
## [1] "Intercept"                      "condition_treated_vs_untreated"
##res <- results(dds, name = 'Group_AD_vs_NOR')

##It gets the final treated group and control group as default.
res <- results(dds, alpha=0.05)

##Get specified groups comparsion, but through this way, the results were not right.
#It's better to get the siggdiff result only by two groups.
#res2 <-  results(dds, alpha=0.05, contrast=c("condition","Copiagag","control"))
#head(res2)



head(res)
summary(res)
sum(res$padj < 0.05, na.rm=TRUE)
res <- res[order(res$padj),]
head(res)
write.csv(res, file = "Result of all genes of Arc1RNAi_vs_Control_BW.csv")


#get different expressed genes, condition is padj < 0.05, increased by 50% or decreased by 30%
diff_gene_deseq2 <-subset(res,padj < 0.05 & (log2FoldChange > 0 | log2FoldChange < -0))
dim(diff_gene_deseq2)
head(diff_gene_deseq2)
write.csv(diff_gene_deseq2,file= "Result of DESeq2 sigdiff genes of Arc1RNAi_vs_Control_BW.csv")

pdf('PCA_all.pdf')
vsdata <- vst(dds, blind=FALSE)
plotPCA(vsdata, intgroup=c("condition"))
dev.off()


##returnData
vsdata <- vst(dds, blind=FALSE)
pcaData <- plotPCA(vsdata, intgroup=c("condition"),returnData = T)
write.csv(pcaData,file= "pcaData.csv")

#library(ggplot2)
#library(plotly)
##get the number of each group
#pcaData <- pcaData[order(pcaData$condition,decreasing=F),]
#table(pcaData$condition)
## create ggplot plot
#p <- ggplot(pcaData,aes(x=PC1,y=PC2,text=condition)) + geom_point()

## visualize plot with plotly
#ggplotly(p)

#set the color of each group
pdf('PCA all_name.pdf')
plot(pcaData[,1:2],pch = 19,col= c(rep("red",4),rep("green",5)),
     cex=1.5)
#add name of each sample
text(pcaData[,1],pcaData[,2],row.names(pcaData),cex=1, font = 1)

#add legend, why it doesn't work?
legend(-100,60,inset = .2 ,pt.cex= 3,title = "Legend",legend = c("Control", "Arc1RNAi"), 
       col = c( "red","green"),pch = 19, cex=0.75,bty="n")
dev.off()
#pdf('PCA_cE.pdf')
#vsdata <- vst(dds, blind=FALSE)
#plotPCA(vsdata, intgroup="cell_type")
#dev.off()

library("pheatmap")
#count matrix pheatmap
pdf('count matrix pheatmap.pdf')
select<-order(rowMeans(counts(dds, normalized = TRUE)),
              decreasing = TRUE)[1:100]
df <- as.data.frame(colData(dds)[,c("condition", "sizeFactor")])

# this gives log2(n + 1)
ntd <- normTransform(dds)
pheatmap(assay(ntd)[select,], cluster_rows=T, show_rownames=F,
         cluster_cols=F, annotation_col=df)
dev.off()

#sample to sample heatmap, this can show the relationship among different samples
library("pheatmap")
pdf('sample to sample pheatmap.pdf')
sampleDists <- dist(t(assay(vsdata)))
library("RColorBrewer")
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- rownames(sample_data)
#rownames(sampleDistMatrix) <- paste(rownames(sample_data), vsdata$condition, vsdata$b, sep="-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Reds")) )(255)
pheatmap(sampleDistMatrix,
         clustering_distance_rows=sampleDists,
         clustering_distance_cols=sampleDists,
         col=colors)
dev.off()

#another way of sample to sample pheatmap??
library(ggplot2)
vsdata_table<-as.data.frame(assay(vsdata))
vsdata_table_rowsum<-transform(vsdata_table, sum=rowSums(vsdata_table))
colnames(vsdata_table_rowsum)
selected<-order(vsdata_table_rowsum, decreasing = T)[1:100]
vsdata_table[selected, ]
pheatmap(as.matrix(vsdata_table[selected,]),Rowv=F, dendrogram = column,
         desity.info='none', trace='none', cexCol=0.9,labRow=NA)


#annotation of the different expressed genes
library('biomaRt')
library("curl")
mart <- useDataset("dmelanogaster_gene_ensembl", useMart("ensembl"))
my_ensembl_gene_id<-row.names(diff_gene_deseq2)
mms_symbols <- getBM(attributes = c('ensembl_gene_id','external_gene_name',"description"),
                     filters = "ensembl_gene_id", values = "my_ensembl_gene_id", mart = mart)
head(mms_symbols)
#merge files of res and mms_symbols
#ensembl_gene_id<-rownames(diff_gene_deseq2)
#diff_gene_deseq2<-cbind(ensembl_gene_id,diff_gene_deseq2)
#colnames(diff_gene_deseq2)[1]<-c("ensembl_gene_id")
#diff_name<-merge(diff_gene_deseq2,mms_symbols,by="ensembl_gene_id")
#head(diff_name)

#check gene of Akap8
#Akap8 <- diff_name[diff_name$external_gene_name=="Arc1",]


pdf("plotMA_test1.pdf")
plotMA(res, ylim=c(-14,14))
##use the function identify to interactively detect the row number of individual genes by clicking on the plot
#This command cause pc very busy, why?
#idx <- identify(res$baseMean, res$log2FoldChange)
#rownames(res)[idx]
dev.off()

#MAplot with a more narrow log2fold change
#res has be sorted by pdadj, there we have to sort by row.names, otherwise, our result will be not consistent with dds

res_order<-res[order(row.names(res)),]
res = res_order

#otherwise, we can put this step before the res ordered by pdadj.
res.shrink <- lfcShrink(dds, contrast = c("condition","Arc1RNAi","Control"), res=res)
plotMA(res.shrink, ylim = c(-5,5))
topGene <- rownames(res)[which.min(res$padj)]
with(res[topGene, ], {
  points(baseMean, log2FoldChange, col="dodgerblue", cex=2, lwd=2)
  text(baseMean, log2FoldChange, topGene, pos=2, col="dodgerblue")
})


##Shrinkage of effect size (LFC estimates) is useful for visualization and ranking of genes.
##he name or number of the coefficient we want to shrink, as it appears in resultsNames(dds)

resLFC <- lfcShrink(dds, coef="condition_Arc1RNAi_vs_Control", type="apeglm")
plotMA(resLFC, ylim=c(-2,2))



#Plot counts of the different expression of one gene in different groups
# no plot, only dat, the min pdaj gene
plotCounts(dds, gene=which.min(res$padj), intgroup="condition", returnData=TRUE)
#no data, only plot, the gene of ENSMUSG0000000024045
plotCounts(dds, gene="Arc1", intgroup="condition", returnData=FALSE)

# ggplot-boxplot of gene Akap8???
plotCounts(dds, gene="Arc1", intgroup="condition", returnData=TRUE) %>%
ggplot(aes(condition, count)) + geom_boxplot(aes(fill=condition)) + scale_y_log10() + ggtitle("Arc1")

#ggplot-point of gene Akap8???
d <- plotCounts(dds, gene="Acr1", intgroup="condition", returnData=TRUE)
ggplot(d, aes(x=condition, y=count)) + 
  geom_point(aes(color= condition),size= 4, position=position_jitter(w=0.5,h=0)) + 
  scale_y_log10(breaks=c(25,100,400))+ ggtitle("Arc1")



pdf('Volcanoplot')
par(mfrow=c(1,1))
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main='Volcano Plot', xlim=c(-8,8)))
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>1), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
dev.off()

pdf('Volcanoplot with lfcShrink')
library(EnhancedVolcano)
res1 <- lfcShrink(dds, res = res, coef = "condition_Arc1RNAi_vs_Control", type = 'normal')
EnhancedVolcano(res1, lab = rownames(res1), x = 'log2FoldChange', y = 'pvalue', xlim = c(-2, 2),
                pCutoff = 0.05, FCcutoff = 0.4, gridlines.major = F, gridlines.minor = F,
                transcriptPointSize = 1, transcriptLabSize = 3,
                legendVisible = T, title = "DESeq2 results", subtitle = "Differential expression",
                drawConnectors = F, selectLab = c('Arc1','mbl','Sun','CG15279', 'nimC1',
                                                  'Cyp12c1'))
dev.off()

#gene enrichment including all the genes
#enrichment analysis using clusterprofiler package created by yuguangchuang
library(clusterProfiler)
library(DOSE)
library(org.Dm.eg.db)
library(topGO)
#get the ENTREZID for the next analysis
#Use https://www.biotools.fr/drosophila/fbgn_converter, and https://flybase.org transfer to FLYBASE first.

sig.gene<-read.csv(file="Result of DESeq2 sigdiff genes of Arc1RNAi_vs_Control_BW.csv")
head(sig.gene)
gene<-sig.gene[,1]
head(gene)
gene.df<-bitr(gene, fromType = "FLYBASE", 
              toType = c("ENTREZID","FLYBASE","ENSEMBL","GENENAME","FLYBASECG", "SYMBOL"),
              OrgDb = org.Dm.eg.db)

head(gene.df, 8)


#Go classification
#Go enrichment analysis
library(stringr)
ego_cc<-enrichGO(gene       = gene.df$FLYBASE,
                 OrgDb      = org.Dm.eg.db,
                 keyType    = 'FLYBASE',
                 ont        = "CC",
                 pvalueCutoff = 0.05,
                 qvalueCutoff = 0.05)
head(ego_cc, 4)
ego_bp<-enrichGO(gene       = gene.df$FLYBASE,
                 OrgDb      = org.Dm.eg.db,
                 keyType    = 'FLYBASE',
                 ont        = "BP",
                 pvalueCutoff = 0.05,
                 qvalueCutoff = 0.05)
head(ego_bp, 4)

pdf('The barplot of GO_CC enrichment analysis of BW Arc1RNAi vs Control_the most sig.pdf')
barplot(ego_cc,showCategory = 40, cex.names=0.4)
#barplot(ego_cc,showCategory = 40,title="The GO_CC enrichment of BW_Arc1RNAi_vs_Control")
scale_size(range=c(2, 12))
scale_x_discrete(labels=function(ego_bp) str_wrap(ego_bp,width = 25))
dev.off()

pdf('The dotplot of GO_CC enrichment analysis of BW CopiafullRNAi vs Control_the most sig.pdf')
dotplot(ego_cc, x = "GeneRatio")
#dotplot(ego_cc, x = "GeneRatio", title="The GO_CC enrichment analysis of CNS CopiafullRNAi_vs_Control_the most sig ") #x=Count
dev.off()

pdf('The GOgraph of GO_CC enrichment analysis of BW CopiafullRNAi vs Control_the most sig.pdf')
plotGOgraph(ego_cc)
dev.off()

write.csv(ego_cc, file = "The ego_cc of BW Arc1RNAi vs Control_the most sig.csv")

pdf('The barplot of GO_BP enrichment analysis of BW Arc1RNAi vs Control_the most sig.pdf')
barplot(ego_bp,showCategory = 40)
#barplot(ego_bp,showCategory = 40,title="The GO_BP enrichment analysis of BW_Arc1RNAi_vs_Control")
dev.off()

pdf('The dotplot of GO_BP enrichment analysis of BW CopiafullRNAi vs Control_the most sig.pdf')
dotplot(ego_bp, x = "GeneRatio")
#dotplot(ego_bp, x = "GeneRatio", title="The GO_BP enrichment analysis of CNS CopiafullRNAi_vs_Control_the most sig ") #x=Count
dev.off()

pdf('The GOgraph of GO_BP enrichment analysis of BW Arc1RNAi vs Control_the most sig.pdf')
plotGOgraph(ego_bp)
dev.off()

write.csv(ego_bp, file = "The ego_bp of BW Arc1RNAi vs Control_the most sig.csv")


#This is about the enrichment around the whole genes
#ego_cc<-enrichGO(gene       = gene.df$FLYBASE,
#                 OrgDb      = org.Dm.eg.db,
#                 keyType    = 'FLYBASE',
#                 ont        = "CC",
#                 pAdjustMethod = "BH",
#                 pvalueCutoff = 0.01,
#                 qvalueCutoff = 0.05)
#ego_bp<-enrichGO(gene       = gene.df$FLYBASE,
#                 OrgDb      = org.Dm.eg.db,
#                 keyType    = 'FLYBASE',
#                 ont        = "BP",
#                 pAdjustMethod = "BH",
#                 pvalueCutoff = 0.01,
#                 qvalueCutoff = 0.05)
#barplot(ego_cc,showCategory = 18,title="The GO_CC enrichment analysis of all DEGs ")


#scale_size(range=c(2, 12))
#scale_x_discrete(labels=function(ego_bp) str_wrap(ego_bp,width = 25))???

  
#dotplot(ego_bp, x = "GeneRatio", title="The GO_BP enrichment analysis of all DEGs ") #x=Count
#dotplot(ego_cc, x = "GeneRatio", title="The GO_CC enrichment analysis of all DEGs ") #x=Count  
#KEGG enrichment

library(stringr)

kk<-enrichKEGG(gene      = gene.df$ENTREZID,
               organism = 'dme',
               pvalueCutoff = 1,
               keyType = 'ncbi-geneid')

head(kk, 10)

pdf('The barplot of KEGG enrichment analysis of BW Arc1RNAi vs Control_the most sig.pdf')
barplot(kk,showCategory = 40)
#barplot(kk,showCategory = 25, title="The KEGG enrichment analysis of BW Arc1RNAi vs Control")
scale_size(range=c(2, 12))
scale_x_discrete(labels=function(kk) str_wrap(kk,width = 25))
dev.off()

pdf('The dotplot of KEGG enrichment analysis of BW Arc1RNAi vs Control_the most sig.pdf')
dotplot(kk, x = "GeneRatio")
#dotplot(kk,showCategory = 25, title="The KEGG enrichment analysis of BW Arc1RNAi vs Control_the most sig")
scale_size(range=c(2, 12))
scale_x_discrete(labels=function(kk) str_wrap(kk,width = 25))
dev.off()


# Gene Set Enrichment Analysis（GSEA）
genelist <- sig.gene$log2FoldChange
names(genelist) <- sig.gene[,1]
genelist <- sort(genelist, decreasing = TRUE)
# GSEA analysis
gsemf <- gseGO(genelist,
               OrgDb = org.Dm.eg.db,
               keyType = "SYMBOL",
               ont="BP",
               pvalueCutoff = 1)

head(gsemf)
# plot GSEA
gseaplot(gsemf, geneSetID="GO:0016043")


#KEGG pathway visuable
library(gage)
library(gageData)
library(dplyr)
library(clusterProfiler)
library(DOSE)
library(stringr)
library(org.Dm.eg.db)

#The websit of kegg specise: (https://www.genome.jp/kegg/catalog/org_list.html)
data(kegg.sets.dme)
data(sigmet.idx.dm)
kegg.sets.dm =  kegg.sets.dm[sigmet.idx.dm]
head(kegg.sets.dm,3)

sig.gene<-read.csv(file="CNA_Arc1RNAi_vs_Control_sigdiff_gene_TE_TEST.csv")
gene.df<-bitr(gene, fromType = "FLYBASE", 
              toType = c("SYMBOL","ENTREZID"),
              OrgDb = org.Dm.eg.db)
head(sig.gene)

foldchanges = sig.gene$log2FoldChange
names(foldchanges)= gene.df$ENTREZID
head(foldchanges)

keggres = gage(foldchanges, gsets = kegg.sets.dm, same.dir = TRUE)
# Look at both up (greater), down (less), and statatistics.
lapply(keggres, head)

keggrespathways = data.frame(id=rownames(keggres$greater), keggres$greater) %>% 
  tbl_df() %>% 
  filter(row_number()<=10) %>% 
  .$id %>% 
  as.character()
keggrespathways

keggresids = substr(keggrespathways, start=1, stop=8)
keggresids

# 先定义画图函数
plot_pathway = function(pid) pathview(gene.data=foldchanges, pathway.id=pid, species="dme", new.signature=FALSE)
# 同时画多个pathways，这些plots自动存到工作目录
tmp = sapply(keggresids, function(pid) pathview(gene.data=foldchanges, pathway.id=pid, species="dme"))



tmp = sapply(keggresids, function(pid) pathview(gene.data=foldchanges, pathway.id=pid, species="dme"))


data<-read.csv('BW_Arc1RNAi_vs_Control_sigdiff_gene_TE_FPKM_sigf.csv',header = T)
head(data)
library(ggplot2)

#For data as factor, you need to transfer it to numbers, but first treat as characters first, otherwise the value will change.
data$Arc1RNAiAVE<-as.numeric(as.character(data$Arc1RNAiAVE))
data$ControlAVE<-as.numeric(as.character(data$ControlAVE))
data$padj<-as.numeric(as.character(data$padj))

#filter the data as you wish
library(dplyr)
#filter data with and condition
data<-filter(data, (data$Arc1RNAiAVE >1 & data$ControlAVE >1 & data$pvalue>0))

#filter data with or condition
#data<-filter(data, (data$Arc1RNAiAVE>1) | (data$ControlAVE>1))
Arc1RNAi = log2(data$Arc1RNAiAVE+1)
Control = log2(data$ControlAVE+1)
Padjvalue = data$padj

#qplot
qplot(x=x, y=y, data=data,geom=c("point", "smooth"),method="lm", color = data$pvalue)

qplot(x=x, y=y, data=data, color = (data$AVE/data$AVE.1))

qplot(x=x, y=y, data=data, geom=c("point", "smooth"),method="lm")

#regular plot
pdf('Arc1RNAi vs Control FPKM')
plot(Arc1RNAi, Control, pch=16, cex=0.5,col= 'grey', main="Arc1RNAi vs Control FPKM")
title(xlab = 'Arc1RNAi', ylab = 'Control')
abline(a=0, b=1)
#sig<-which(data$AVE>20)
sig<-which(data$pvalue<0.05)
sigx<-x[sig]
sigy<-y[sig]
#sig<-which(data$AVE>20)
points(sigx,sigy, pch =16, cex=0.5, col="black")
text(sigx,sigy, data$target, cex=0.8, font=1.2, col = 'red')
dev.off()

